openapi: 3.0.0
info:
  version: 1.0.0
  title: ft_transcendence API
  description: API Document for ft_transcendence
servers:
  - url: "http://localhost:3001"
security:
  - bearerAuth: []

tags:
  - name: health
    description: ヘルスチェック
  - name: user
    description: ユーザー
  - name: chatRoom
    description: チャットルーム
  - name:  chat-block-user
    description: チャット機能でのミュートユーザ情報
  - name: chatRoomMembers
    description: チャットルームの参加者情報
  - name: chatDMMembers
    description: DMの参加者情報
  - name: match
    description: 進行中のマッチリスト
  - name: auth
    description: 認証

paths:
  /health:
    get:
      tags: 
        - health
      summary: Health check
      security: []
      description: ヘルスチェック
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/health'

  /user:
    post:
      tags:
        - user
      summary: user
      security: []
      description: ユーザーの作成
      requestBody:
        description: create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_create_req'
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_create_res'

  /user/users:
    get:
      tags:
        - user
      summary: 全ユーザーの取得
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users_get_res'


  /user/{userID}:
    get:
      tags:
        - user
      summary: get user by ID
      description: IDを指定してuser情報を取得
      parameters:
        - name: userID
          required: true
          description: id
          in: path
          schema:
            type: integer
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_get_res'
    delete:
      tags:
        - user
      summary: delete user
      parameters:
        - name: userID
          required: true
          description: id
          in: path
          schema:
            type: integer
      responses:
        200:
          content:
            text/plain:
              schema:
                type: string
                example: OK
    put:
      tags:
        - user
      summary: update user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#components/schemas/user_update_req'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_get_res'

  /user/sign_in:
    post:
      tags:
        - user
      summary: Sign In
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#components/schemas/user_signin_req'
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_get_res'
        401:
          description: 失敗 

  /user/friends/{userID}:
    get:
      tags:
        - user
      summary: get friends
      description: パラメータ(userID)のフレンドを取得
      parameters:
        - name: userID
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/friends_get_res'
    delete:
      tags:
        - user
      summary: delete friend
      parameters:
        - name: userID
          required: true
          description: id
          in: path
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/friends_delete_req'
      responses:
        200:
          content:
            text/plain:
              schema:
                type: string
                example: OK
  /user/friends:
    post:
      tags:
        - user
      summary: request or accept friendship
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/friends_post_req'
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/friends_post_req'

  /user/friends/pending/{userID}:
    get:
      tags:
        - user
      summary: get pending list
      description: パラメータ(userID)のフレンド待機リストを取得
      parameters:
        - name: userID
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/friends_get_res'

  /user/user_avatar/{userID}:
    get:
      tags:
        - user
      summary: get user avatar
      parameters:
        - name: userID
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: 成功
          content:
            image/png:
              schema:
                type: string
                format: binary
  /user/check/username-availability:
    post:
      tags:
        - user
      summary: check username duplicate
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_check_req'
      responses:
        201:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_check_res'

  /chatroom:
    get:
      tags:
        - chatRoom
      summary: get chatRoom List
      description: chatRoom情報の一覧を取得
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/chat_room_res'
    post:
      summary: get chatRoom
      tags:
        - chatRoom
      description: chatRoom情報を新規作成
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chat_room_req'
      responses:
        201:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat_room_res'

  /chatroom/{roomId}:
    post:
      summary: update chatRoom
      tags:
        - chatRoom
      description: chatRoom情報を更新
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chat_room_req'
      responses:
        201:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat_room_res'

    delete:
      tags:
        - chatRoom
      summary: delete chatRoom
      description: chatRoom情報を削除
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/chat_room_res'
  /chatroom/{roomId}/auth:
    post:
      tags:
        - chatRoom
      summary: auth protected chatRoom
      description: chatRoomへのパスワード認証
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chat_room_auth_req'
      responses:
        201:
          description: 成功
        401:
          description: 認証失敗
  /chat-block-user:
    get:
      tags:
        - chat-block-user
      summary: get chat-block-user
      description: チャット機能でのミュートユーザ情報一覧を取得
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/chat-block-user'
    post:
      summary: update block
      tags:
        - chat-block-user
      description: チャット機能でのミュートユーザ情報を更新
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chat-block-user'
      responses:
        201:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat-block-user'
    delete:
      summary: update block
      tags:
        - chat-block-user
      description: チャット機能でのミュートユーザ情報を削除
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chat-block-user-pk'
      responses:
        200:
          description: 成功
  /chat-block-user/{blockUserId}:
    get:
      tags:
        - chat-block-user
      summary: get block for the specified user
      description: チャット機能でのミュートユーザ情報の取得
      parameters:
        - in: path
          name: blockUserId
          required: true
          schema:
            type: number
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/chat-block-user'
  /chatRoomMembers:
    get:
      tags:
        - chatRoomMembers
      summary: get chatRoomMembers
      description: チャット機能でのルームの参加者情報を取得
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/chatRoomMember'
    post:
      summary: update chatRoomMembers
      tags:
        - chatRoomMembers
      description: チャット機能でのルームの参加者情報を更新
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatRoomMember'
      responses:
        201:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatRoomMember'
    delete:
      summary: delete chatRoomMembers
      tags:
        - chatRoomMembers
      description: チャット機能でのルームの参加者情報を削除
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatRoomMemberPK'
      responses:
        200:
          description: 成功
  /chatDMMembers/{UserId}:
    get:
      tags:
        - chatDMMembers
      summary: get chatDMMembers
      description: チャット機能でのルームの参加者情報を取得
      parameters:
        - in: path
          name: UserId
          required: true
          schema:
            type: number   
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/chatDMMember'
  /chatDMMembers:
    post:
      summary: update chatDMMembers
      tags:
        - chatDMMembers
      description: チャット機能でのルームの参加者情報を更新
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatDMMemberPK'
      responses:
        201:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatDMMember'
    delete:
      summary: delete chatDMMembers
      tags:
        - chatDMMembers
      description: チャット機能でのルームの参加者情報を削除
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatDMMemberPK'
      responses:
        200:
          description: 成功
  /match/matches:
    get:
      tags:
        - match
      summary: 全マッチの取得
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/matches_get'

  /match/{matchID}:
    get:
      tags:
        - match
      summary: get match by ID
      description: IDを指定してmatch情報を取得
      parameters:
        - name: matchID
          required: true
          description: id
          in: path
          schema:
            type: integer
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/match_get'

  /auth/signin:
    post:
      tags:
        - auth
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_signin_req'
      responses:
        '200':
          description: 成功
          content:
            text/plain:
              schema:
                type: string

  /auth/protected:
    get:
      tags:
        - auth
      summary: Get protected data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object

  /auth/42/{code}:
    get:
      tags: 
        - auth
      summary: 42による認証
      security: []
      parameters:
        - name: code
          required: true
          description: 認証code
          in: path
          schema:
            type: string
      responses:
        200:
          description: 成功
          content:
            text/plain:
              schema:
                type: string
                example: token

  /auth/2fa/setup/{userId}:
    get:
      tags: 
        - auth
      summary: Get OTP data
      description: otp secretとQRCodeを取得
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  secret:
                    type: string
                  qrCode:
                    type: string

  /auth/2fa/enable:
    post:
      tags: 
        - auth
      summary: Enable two-factor authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableTwoFactorAuthDto'
      responses:
        200:
          description: 成功
          content:
          text/plain:
            schema:
              type: string

  /auth/2fa/disable:
    post:
      tags:
        - auth
      summary: Disable two-factor authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: integer
      responses:
        200:
          description: 成功

  /auth/2fa/status:
    get:
      tags: 
          - auth
      summary: Check two-factor authentication status
      parameters:
        - in: query
          name: userId
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: boolean

  /auth/2fa/verify:
    post:
      tags:
          - auth
      summary: Verify two-factor authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyTwoFactorAuthDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request
          content:
            text/plain:
              schema:
                type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    health:
      type: object
      properties:
        health:
          type: string
          example: OK

    user_create_req:
      type: object
      properties:
        name:
          type: string
          example: Tom Brady
        password:
          type: string
          example: password
        avatar:
          type: string
          example: iVBORw0KGgBase64...

    user_create_res:
      type: object
      properties:
        id:
          type: integer
          example: 1

    user_update_req:
      type: object
      properties:
        name:
          type: string
          example: Updated!!!
        password:
          type: string
          example: update

    users_get_res:
      type: array
      items:
        $ref: '#/components/schemas/user_get_res'

    user_get_res:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Tom Brady

    user_signin_req:
      type: object
      properties:
        name:
          type: string
          example: user
        password:
          type: string
          example: password

    user_check_req:
      type: object
      properties:
        username:
          type: string
          example: guest1

    user_check_res:
      type: object
      properties:
        message:
          type: string
          example: Username already exists

    friends_get_res:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 1
          name:
            type: string
            example: Nick Foles
    
    friends_post_req:
      type: object
      properties:
        from:
          type: integer
          example: 1
        to:
          type: integer
          example: 2
    friends_delete_req:
      type: object
      properties:
        friendUserId:
          type: integer
          example: 2


    chat_room_res:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Tom Brady
        created_by_user_id:
          type: number
          example: 1
        public_id:
          type: string
          example: 'public'
    chat_room_req:
      type: object
      properties:
        name:
          type: string
          example: Tom Brady
        created_by_user_id:
          type: number
          example: 1
        public_id:
          type: string
          example: 'public'
    chat_room_auth_req:
      type: object
      properties:
        password:
          type: string
          example: "password"
    chat-block-user:
      type: object
      properties:
        blockUserId:
          type: number
          example: 1
        blockedUserId:
          type: number
          example: 2
        block_until:
          type: string
          example: "2024-01-31T14:59:00.000Z"
    chat-block-user-pk:
      type: object
      properties:
        blockUserId:
          type: number
          example: 1
        blockedUserId:
          type: number
          example: 2
    chatRoomMember:
      type: object
      properties:
        chatRoomId:
          type: number
          example: 1
        userId:
          type: number
          example: 1
        isBanned:
          type: boolean
          example: false
        isAdministrator:
          type: boolean
          example: false
    chatRoomMemberPK:
      type: object
      properties:
        chatRoomId:
          type: number
          example: 1
        userId:
          type: number
          example: 1
    chatDMMember:
      type: object
      properties:
        user1Id:
          type: number
          example: 1
        user2Id:
          type: number
          example: 2
        chatRoomId:
          type: number
          example: 1
    chatDMMemberPK:
      type: object
      properties:
        user1Id:
          type: number
          example: 1
        user2Id:
          type: number
          example: 2
    match_get:
      type: object
      properties:
        id:
          type: number
          example: 0
        p1:
          type: number
          example: 1
        p2:
          type: number
          example: 1
        winner:
          type: number
          example: 1

    matches_get:
      type: array
      items:
        $ref: '#/components/schemas/match_get'

    EnableTwoFactorAuthDto:
      type: object
      properties:
        userId:
          type: number
          example: 1
        secret:
          type: string
          description: getOTPDataで得たsecret
        token:
          type: string
          description: getOTPDataで得たqrcodeをimgタグのsrcへ代入しqrcodeを読み取って得た6桁のコード

    VerifyTwoFactorAuthDto:
      type: object
      properties:
        userId:
          type: number
        token:
          type: string
          description: 6桁のコード